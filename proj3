#include <iostream>
#include <fstream>

#define SIZE 256
#define ZIP 5
#define NUMAGENCY 3

int userMenuPrompt();
void readCars(struct RentalAgency *arr);
void printAgenciesToTerminal(struct RentalAgency *arr);
void estimateRentalCost(struct RentalAgency *arr);
void findCheapestRental(struct RentalAgency *arr);
void reserveCar(struct rentalAgency *arr);

using namespace std;

class RentalCar
{

	private:

	int m_year;
	char m_make[SIZE+1];
	char m_model[SIZE+1];
	float m_price;
	bool m_available;

	public:
		RentalCar();
		RentalCar(int *year, char *make, char *model, float *price, bool *available);
		void printCar(struct RentalAgency *arr);
		
		void estimateCost(struct RentalAgency *arr, int agency, int carIndex, int rentDays){
		
			float totalCost;
	
			totalCost = rentDays * RentalCar[agency].getPrice;
	
			cout << "Total Price: " << totalCost;
		}
		
		void setReserve(int *year){ m_year = 0000; }
		void setYear(int *year){ m_year = year; }
		void setMake(char *make){m_make = make; }
		void setModel(char *model){m_model = model; }
		void setPrice(float *price){m_price = price; }
		void setAvailable(bool *available){m_available = available; }
		int getYear(){ return m_year; }
		char getMake(){ return m_make; }
		char getModel(){ return m_model; }
		float getPrice(){ return m_price; }
		bool getAvailable(){ return m_available; }

};


struct RentalAgency{

	char agencyName[SIZE];
	int zipcode[ZIP];
	RentalCar inventory[ZIP];
	
	char charZip(int *zipcode){
		char zip[ZIP];
		for(int i = 0; i < ZIP; i++){
			zip[i] = zipcode[i];
		}
		return zip;
	}
};

RentalCar::RentalCar(){
	m_year = 2017;
	m_make = "Toyota";
	m_model = "Corolla";
	m_price = 100.00f;
	m_available = false;
}

RentalCar::RentalCar(int *year, char *make, char *model, float *price, bool *available){
	m_year = year;
	m_make = make;
	m_model = model;
	m_price = price;
	m_available = available;
	printCar();
}

RentalCar::printCar(struct RentalAgency *arr){

	for(int i = 0; i < NUMAGENCY; i++){
		cout << arr[i].agencyName << " " << arr[i].charZip << endl;
		cout << " " << arr[i].inventory[i].getYear << " " <<  arr[i].inventory[i].getMake << " " << arr[i].inventory[i].getModel << " " << arr[i].inventory[i].getPrice << " " << arr[i].inventory[i].getAvailable << endl;
	}
}

int main(){

	userMenuPrompt();
	
}

int userMenuPrompt(){ 

	int userInput;

	struct RentalAgency carsArray[NUMAGENCY];

	do{
		cout << "1. Enter your rental car file name.\n";
		cout << "2. Print out rental car info to terminal.\n";
		cout << "3. Estimate the rental cost.\n";
		cout << "4. Find the cheapest car.\n";
		cout << "5. Reserve a car\n";
		cout << "6. Exit.\n";
		
		cin >> userInput;
		
		switch(userInput){
			case 1:
				readCars(carsArray); 
				break;
			case 2:
				printAgenciesToTerminal(carsArray);
				break;
			case 3:
				estimateRentalCost(carsArray);
				break;
			case 4:
				findCheapestRental(carsArray);
				break;
			case 5:
				reserveCar(carsArray);
				break;
			case 6:
				return 0;
				break;
		}
	}while(userInput > 0 && userInput < 7);
	
	return 0;
}

void readCars(struct RentalAgency *arr){
	char input[100];
	ifstream inputFile(input);
	cout << "Enter your full input file name." << endl;
	cin >> input;
	inputFile.open(input);

	if(!inputFile.is_open()){
		cerr << "Input file can't be opened. Check if name is correct.\n";
		return;
	}
	
	if(!inputFile.eof()){
		for(int i = 0; i < NUMCARS; ++i){
			inputFile >> carsArray[i].agencyName >> carsArray[i].charZip >> endl >> carsArray[i].inventory[i].setYear >> carsArray[i].inventory[i].inventory[i].setMake >> carsArray[i].inventory[i].setModel >> carsArray[i].inventory[i]>>setPrice >> carsArray[i].inventory[i].setAvailable;
		}
	}
	inputFile.close();
}

void printAgenciesToTerminal(struct RentalAgency *arr){
	
	arr.printCar(arr);
}

void estimateRentalCost(struct RentalAgency *arr){

	int agency, carIndex, days;
	float cost;
	
	cout << "Enter the agency index (1-3)" << endl;
	cin >> agency;
	cout << "Enter the car index (1-5)" << endl;
	cin >> carIndex;
	cout << "Enter the number of days you'd like to rent this car." << endl;
	cin >> days;
	
	arr[agency].estimateCost(arr, agency, carIndex, days);
}

void findCheapestRental(struct RentalAgency *arr){

	RentalAgency temp;

	for(int i = 0; i < NUMCARS; i++){
		for(int j = 0; j < NUMCARS; j++){
			if(arr[j].inventory[j].price > arr[j+1].inventory[j].price && arr[j].inventory[j].available){
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
	
}

void reserveCar(struct rentalAgency *arr){

	cout << "Enter the agency index (1-3)" << endl;
	cin >> agency;
	cout << "Enter the car index (1-5)" << endl;
	cin >> carIndex;
	cout << "Enter the number of days you'd like to rent this car." << endl;
	cin >> days;
	
	if(arr[agency].inventory[carIndex].available = true){
		arr[agency].inventory[carIndex].setReserve();
	}
	printAgenciesToTerminal(arr);
	
}
