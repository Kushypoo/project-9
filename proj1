#include <iostream>
#include <fstream>
void printNamesToFile(int nameOrder[NAMECOUNT], ofstream &outputStream, char namesArray [NAMECOUNT][STRMAX+1]){
#define STRMAX 8
#define NAMECOUNT 10
#define FILENAME 100

using namespace std;
void readNames(ifstream &inputStream, char namesArray [NAMECOUNT][STRMAX+1]);
void printNamesToTerminal(int nameOrder [NAMECOUNT], char namesArray [NAMECOUNT][STRMAX+1]);
void sortNamesAlphabetic(char namesArray [NAMECOUNT][STRMAX+1], int nameOrder[NAMECOUNT]);
void sortNamesByLength(char namesArray [NAMECOUNT][STRMAX+1], int nameOrder[NAMECOUNT]);

void myStringCopy(char destination [], const char source[]);
int myStringLength(const char str []);
int myStringCompare(const char str1 [], const char str2 []);



int main(){
	
	int list[NAMECOUNT];
	
	for(int i = 0; i < NAMECOUNT; i++){
		list[i] = i;
	}

	char alphabeticallySortedList [NAMECOUNT][STRMAX+1];
	char lengthSortedList [NAMECOUNT][STRMAX+1];
	
	char input[FILENAME], output[FILENAME], namesArray [NAMECOUNT][STRMAX+1];
	
	cout << "Enter your full input file name." << endl;
	cin >> input;
	cout << "Enter your full output file name." << endl;
	cin >> output;
	
	ifstream inputFile(input);
	ofstream outputFile(output);
	
	if(!inputFile.is_open()){
		cerr << "Input file can't be opened. Check if name is correct.\n";
		return 1;
	}
	inputFile.open(input);
	
	
	
	readNames(inputFile, namesArray);
	for(int i = 0; i < NAMECOUNT; ++i){
		myStringCopy(alphabeticallySortedList[i], namesArray[i]);
		for(int j = 0; j < NAMECOUNT; ++j){
			myStringCopy(lengthSortedList[j], namesArray[j]);
		}
		
	}
	
	cout << "Unsorted Data (Original Input Order and Name)" << endl << "============================\n";
	
	printNamesToTerminal(list, namesArray);
	//sortNamesAlphabetic(namesArray, list);
	
	cout << "Alphabetically Data (Original Input Order and Name)" << endl << "============================\n";
	printNamesToTerminal(list, namesArray);
	//sortNamesByLength(namesArray, list);
	
	cout << "Sorted-by-Length -and- Alphabetically Data (Original Input Order and Name)" << endl << "============================\n";
	printNamesToTerminal(list, namesArray);
	inputFile.close();

	return 0;
}

void readNames(ifstream &inputStream, char namesArray [NAMECOUNT][STRMAX+1]){

	if(!inputStream.eof()){
		for(int i = 0; i < NAMECOUNT; ++i){
			for(int j = 0; j < STRMAX
			inputStream >> namesArray[i];
		}
	}
}

void printNamesToTerminal(int nameOrder [NAMECOUNT], char namesArray [NAMECOUNT][STRMAX+1]){
	
	for(int i = 0; i < NAMECOUNT; ++i){
		cout << nameOrder[i] << " " << namesArray[i] << endl;
	}

}

void sortNamesAlphabetic(char namesArray [NAMECOUNT][STRMAX+1], int nameOrder[NAMECOUNT]){
	
	int tempNum;
	char temp[STRMAX+1];	

	for(int i = 0; i < NAMECOUNT; i++){
		for(int j = 0; j < STRMAX; j++){
			if(myStringCompare(namesArray[i], namesArray[j]) > 0){
				myStringCopy(temp, namesArray[j]);
				myStringCopy(namesArray[j], namesArray[j+1]);
				myStringCopy(namesArray[i], temp);
				tempNum = nameOrder[j];
				nameOrder[j] = nameOrder[j+1];
				nameOrder[j+1] = tempNum;
			}
		}
	}
}

void sortNamesByLength(char namesArray [NAMECOUNT][STRMAX+1], int nameOrder[NAMECOUNT]){
	char temp[STRMAX];
	int tempNum;

	for(int i = 0; i < NAMECOUNT; i++){
		for(int j = 0; j < STRMAX; j++){
			if(myStringLength(namesArray[j]) > myStringLength(namesArray[j+1])){
				myStringCopy(temp, namesArray[j]);
				myStringCopy(namesArray[j], namesArray[j+1]);
				myStringCopy(namesArray[j+1], temp);
				tempNum = nameOrder[j];
				nameOrder[j] = nameOrder[j+1];
				nameOrder[j+1] = tempNum;
				
			}
		}
	}
}


void myStringCopy(char destination [], const char source[]){
	int i = 0;
	while(source[i] != '\0'){
		destination[i] = source[i];
		i++;
	}
	destination[i] = '\0';
}

int myStringLength(const char str []){
	int i = 0, strLength;
	
	while(str[i] != '\0'){
		++i;
		strLength++;
	}

	return strLength;
}

int myStringCompare(const char str1 [], const char str2 []){

	int i = 0;	

	while(str1[i] == str2[i] && str1[i] != '\0'){

		if(str1[i] != str2[i] && str1[i] < str2[i]){
			return -1;
		}else if(str1[i] != str2[i] && str1[i] > str2[i]){
			return 1;
		}
	}

	return i;
}

